group = 'com.github.pedrovgs'
version = '0.0.5-SNAPSHOT'

apply plugin: 'scala'
apply plugin: 'jacoco'
apply plugin: 'com.github.maiflai.scalatest'
apply plugin: 'scalafmt'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.12.2'
    compile 'org.typelevel:cats_2.12:0.9.0'
    compile 'net.sf.supercsv:super-csv:2.4.0'
    compile 'org.scalaj:scalaj-http_2.12:2.3.0'
    compile 'net.liftweb:lift-json_2.12:3.1.0-M2'
    compile 'net.liftweb:lift-json-ext_2.12:3.1.0-M2'
    testCompile 'org.scalatest:scalatest_2.12:3.0.3'
    testRuntime 'org.pegdown:pegdown:1.4.2'
    testCompile 'com.github.tomakehurst:wiremock:2.6.0'
    testCompile 'org.slf4j:slf4j-api:1.7.25'
    testCompile 'org.scalacheck:scalacheck_2.12:1.13.4'
    testCompile 'org.scalamock:scalamock-scalatest-support_2.12:3.5.0'
}

test {
    maxParallelForks = 1
}

apply plugin: 'maven'
apply plugin: 'signing'

install {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            // POM signature
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            // Target repository
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            pom.project {
                name POM_NAME
                description POM_DESCRIPTION
                packaging POM_PACKAGING
                url POM_URL

                scm {
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                    url POM_SCM_URL
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}

sourceSets {
    test {
        output.resourcesDir = "build/classes/test/resources"
    }
}
